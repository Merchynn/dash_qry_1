WITH TAB_TEA AS (
  SELECT
    SOLIC.COD_ANALITICO_BENEFICIARIO,
    date(SOLIC.DAT_INCLUSAO) data_inclusao,
    SOLIC.COD_PRESTADOR,
    SOLIC.NUM_STATUS,
    SOLIC.NUM_GUIA_PRESTADOR,
    SOLIC.NUM_SOLICITACAO_VPP_REF,
    SOLIC.COD_TIPO_CANAL,
    SADT_ITEM.NUM_SOLIC_SP_SADT_ITEM,
    SADT_ITEM.NUM_SOLICITACAO_VPP,
    SADT_ITEM.QTD_SOLICITADA,
    SADT_ITEM.QTD_AUTORIZADA,
    SADT_ITEM.COD_SERVICO,
    SADT_ITEM.NUM_TAB_MEDICA,
    SADT_ITEM.IDC_STATUS_ITEM,
    SADT_ITEM.NME_TRANSACAO_CDC,
    ROW_NUMBER() OVER (PARTITION BY SOLIC.COD_ANALITICO_BENEFICIARIO ORDER BY SOLIC.DAT_INCLUSAO DESC) as rn
  FROM
    `[id_projeto_anon].DS_SAUDE_PROVPP_anon.SOLIC_SP_SADT_ITEM_anon` SADT_ITEM -- Tabela anonimizada
  INNER JOIN (
    SELECT
      CONCAT(SOLIC.COD_PREF_EMPRESA, SOLIC.cod_empresa, SOLIC.COD_FAMILIAR_BENEF, SOLIC.COD_RDP) AS COD_ANALITICO_BENEFICIARIO,
      NUM_SOLICITACAO_VPP,
      SOLIC.DAT_INCLUSAO,
      SOLIC.COD_PRESTADOR,
         CASE
      WHEN SOLIC.NUM_STATUS = 1 THEN "Autorizado"
      WHEN SOLIC.NUM_STATUS = 2 THEN "Em análise"
      WHEN SOLIC.NUM_STATUS = 3 THEN "Negado"
      WHEN SOLIC.NUM_STATUS = 4 THEN "Aguardando justificativa técnica do solicitante"
      WHEN SOLIC.NUM_STATUS = 5 THEN "Aguardando documentação do prestador"
      WHEN SOLIC.NUM_STATUS = 6 THEN "Solicitação cancelada"
      WHEN SOLIC.NUM_STATUS = 7 THEN "Autorizado parcialmente"
    END AS NUM_STATUS,
      SOLIC.NUM_GUIA_PRESTADOR,
      SOLIC.NUM_SOLICITACAO_VPP_REF,
      SOLIC.COD_TIPO_CANAL
    FROM
      `[id_projeto_anon].DS_SAUDE_PROVPP_anon.SOLICITACAO_VPP_anon` SOLIC -- Tabela anonimizada
  ) SOLIC ON SADT_ITEM.NUM_SOLICITACAO_VPP = SOLIC.NUM_SOLICITACAO_VPP
  WHERE
    SADT_ITEM.COD_SERVICO IN ([cod_serv_A], [cod_serv_B], [cod_serv_C], [cod_serv_D]) -- Códigos de serviço anonimizados
    --AND SOLIC in ('Autorizado','Autorizado parcialmente')
)
-----------
, ultimo_atend_tea as (
  SELECT
    TAB_TEA.*,
    CAD_BENEF.COD_CARTEIRINHA_BENEFICIARIO,
    CAD_BENEF.NME_BENEFICIARIO,
    CAD_BENEF.NUM_CPF,
    CAD_BENEF.NUM_CPF_TITULAR,
    CAD_BENEF.DSC_EMAIL,
    CAD_BENEF.DSC_EMAIL_TITULAR,
    CAD_BENEF.NUM_TELEFONE,
    CAD_BENEF.NUM_TELEFONE_TITULAR,
    CAD_BENEF.COD_PLANO,
    CAD_BENEF.COD_SUBPADRAO_PLANO,
    CAD_BENEF.DSC_SUBPADRAO_PLANO,
    CAD_BENEF.status_beneficiario,
    CAD_BENEF.QTD_IDADE,
    CASE
      WHEN TAB_TEA.rn = 1 THEN 'S'
      ELSE 'N'
    END AS flag_ultimo_atendendimento,
    CASE
      WHEN CAST(QTD_IDADE AS INTEGER) BETWEEN 0 AND 9 THEN '0 - 9'
      WHEN CAST(QTD_IDADE AS INTEGER) BETWEEN 10 AND 19 THEN '10 - 19'
      WHEN CAST(QTD_IDADE AS INTEGER) BETWEEN 20 AND 29 THEN '20 - 29'
      WHEN CAST(QTD_IDADE AS INTEGER) BETWEEN 30 AND 39 THEN '30 - 39'
      WHEN CAST(QTD_IDADE AS INTEGER) BETWEEN 40 AND 49 THEN '40 - 49'
      WHEN CAST(QTD_IDADE AS INTEGER) >= 50 THEN '50+'
    END AS PERFIL_ETARIO,
  FROM
    TAB_TEA
  INNER JOIN (
    SELECT
      COD_CARTEIRINHA_BENEFICIARIO,
      NME_BENEFICIARIO,
      NUM_CPF,
      NUM_CPF_TITULAR,
      DSC_EMAIL,
      DSC_EMAIL_TITULAR,
      NUM_TELEFONE,
      NUM_TELEFONE_TITULAR,
      COD_PLANO,
      COD_SUBPADRAO_PLANO,
      DSC_SUBPADRAO_PLANO,
      COD_ANALITICO_BENEFICIARIO,
      QTD_IDADE,
      CASE
        WHEN DAT_FIM_VIGENCIA_PLANO = '9999-12-31' THEN 'ATIVO'
        ELSE 'INATIVO'
      END AS status_beneficiario
    FROM `[id_projeto_anon].DS_REF_SAUDE_BENEF_anon.TB_CAD_BENEFICIARIO_anon` -- Tabela anonimizada
  ) CAD_BENEF ON TAB_TEA.COD_ANALITICO_BENEFICIARIO = CAD_BENEF.COD_ANALITICO_BENEFICIARIO
  where data_inclusao >= '2024-01-01' -- Data de corte mantida, geralmente não é sensível
)
--------------
, adicional_tea as (
  SELECT
    ultimo_tea.*,
    DASH_TEA.COD_VII,
    DASH_TEA.DSC_CARTEIRA_EMPRESA,
    DASH_TEA.COD_SERVICO AS COD_SERVICO_DASH,
    DASH_TEA.NME_PLANO AS NME_PLANO_DASH,
    DASH_TEA.NME_PLANO_AJUSTADO,
    DASH_TEA.COD_PRESTADOR AS COD_PRESTADOR_DASH,
    DASH_TEA.NME_FANTASIA_PRESTADOR,
    DASH_TEA.MUNICIPIO_PRESTADOR,
    DASH_TEA.UF_PRESTADOR,
    DASH_TEA.COD_GRUPO_ECONOMICO_EMPRESA,
    DASH_TEA.NME_GRUPO_ECONOMICO_EMPRESA,
    DASH_TEA.COD_EMPRESA_PAGAMENTO_SEGURO,
    DASH_TEA.NME_FANTASIA_EMPRESA,
    DASH_TEA.VALOR_PAGO,
    DASH_TEA.DAT_EXECUCAO_SINISTRO,
    DASH_TEA.DSC_TIPO_SINISTRO,
    DASH_TEA.FLG_LIMINAR,
    DASH_TEA.DSC_SEXO_BENEFICIARIO
  FROM
    ultimo_atend_tea ultimo_tea
  INNER JOIN (
    SELECT
      COD_VII, COD_CARTEIRINHA_BENEFICIARIO, DSC_CARTEIRA_EMPRESA, COD_SERVICO,
      NME_PLANO, NME_PLANO_AJUSTADO, COD_PRESTADOR, NME_FANTASIA_PRESTADOR,
      MUNICIPIO_PRESTADOR, UF_PRESTADOR, COD_GRUPO_ECONOMICO_EMPRESA,
      NME_GRUPO_ECONOMICO_EMPRESA, COD_EMPRESA_PAGAMENTO_SEGURO,
      NME_FANTASIA_EMPRESA, VALOR_PAGO, DAT_EXECUCAO_SINISTRO,
      DSC_TIPO_SINISTRO, FLG_LIMINAR,DSC_SEXO_BENEFICIARIO
    FROM
      `[id_projeto_alt_anon].DS_SAUDE_CMD_CENTER_anon.TB_DASH_TEA_V4_anon` -- Tabela anonimizada (assumindo potencial projeto/dataset diferente)
  ) DASH_TEA ON ultimo_tea.COD_CARTEIRINHA_BENEFICIARIO = DASH_TEA.COD_CARTEIRINHA_BENEFICIARIO
)
--------- SELECT FINAL
,tb_fin as (SELECT
  	ad_tea.COD_ANALITICO_BENEFICIARIO,
    ad_tea.data_inclusao,
    ad_tea.COD_PRESTADOR,
    ad_tea.rn,
    ad_tea.NUM_STATUS,
    ad_tea.NUM_GUIA_PRESTADOR,
    ad_tea.NUM_SOLICITACAO_VPP_REF,
    ad_tea.COD_TIPO_CANAL,
    ad_tea.NUM_SOLIC_SP_SADT_ITEM,
    ad_tea.NUM_SOLICITACAO_VPP,
    ad_tea.QTD_SOLICITADA,
    ad_tea.QTD_AUTORIZADA,
    ad_tea.COD_SERVICO,
    ad_tea.NUM_TAB_MEDICA,
    ad_tea.IDC_STATUS_ITEM,
    ad_tea.NME_TRANSACAO_CDC,
	ad_tea.COD_CARTEIRINHA_BENEFICIARIO,
    ad_tea.NME_BENEFICIARIO,
    ad_tea.NUM_CPF,
    ad_tea.NUM_CPF_TITULAR,
    ad_tea.DSC_EMAIL,
    ad_tea.DSC_EMAIL_TITULAR,
    ad_tea.NUM_TELEFONE,
    ad_tea.NUM_TELEFONE_TITULAR,
    ad_tea.COD_PLANO,
    ad_tea.COD_SUBPADRAO_PLANO,
    ad_tea.DSC_SUBPADRAO_PLANO,
    ad_tea.status_beneficiario,
    ad_tea.QTD_IDADE,
 	ad_tea.flag_ultimo_atendendimento,
	ad_tea.PERFIL_ETARIO,
   ad_tea.COD_VII,
    ad_tea.DSC_CARTEIRA_EMPRESA,
     ad_tea.COD_SERVICO_DASH,
     ad_tea.NME_PLANO_DASH,
    ad_tea.NME_PLANO_AJUSTADO,
    ad_tea.COD_PRESTADOR_DASH,
    ad_tea.NME_FANTASIA_PRESTADOR,
    ad_tea.MUNICIPIO_PRESTADOR,
    ad_tea.UF_PRESTADOR,
    ad_tea.COD_GRUPO_ECONOMICO_EMPRESA,
    ad_tea.NME_GRUPO_ECONOMICO_EMPRESA,
    ad_tea.COD_EMPRESA_PAGAMENTO_SEGURO,
    ad_tea.NME_FANTASIA_EMPRESA,
    ad_tea.VALOR_PAGO,
    ad_tea.DAT_EXECUCAO_SINISTRO,
    ad_tea.DSC_TIPO_SINISTRO,
    ad_tea.FLG_LIMINAR,
    ad_tea.DSC_SEXO_BENEFICIARIO,
  --DSC_SEXO_BENEFICIARIO,
  IND_INICIATIVA.DSC_ACEITE,
  IND_INICIATIVA.DSC_PRODUTO,
  IND_INICIATIVA.DSC_PADRAO_PLANO,
  subpadrao.COD_PRODUTO,
  --COD_GRUPO_ECONOMICO_PRESTADOR,
  --COD_EMPRESA_PAGAMENTO_SEGURO
  --SUM(VALOR_PAGO) OVER () AS VALOR_PAGO_TOTAL,
  --COUNT(DISTINCT CONCAT(COD_CARTEIRINHA_BENEFICIARIO, '-', FORMAT_DATE('%Y%m%d', DAT_EXECUCAO_SINISTRO))) OVER () AS qnt_atend,
  --SAFE_DIVIDE(
  --  SUM(VALOR_PAGO) OVER (),
  --  COUNT(DISTINCT CONCAT(COD_CARTEIRINHA_BENEFICIARIO, '-', FORMAT_DATE('%Y%m%d', DAT_EXECUCAO_SINISTRO))) OVER ()
  --) AS custo_medio
FROM
  adicional_tea ad_tea
 left join `[id_projeto_anon].DS_ESTRATEGIA_SAUDE_anon.TB_VIS_BENEF_IND_INICIATIVA_anon` IND_INICIATIVA -- Tabela anonimizada
on ad_tea.COD_CARTEIRINHA_BENEFICIARIO = IND_INICIATIVA.COD_CARTEIRINHA_BENEFICIARIO
 left join(SELECT  COD_PLANO,
              COD_PRODUTO,
              COD_SUB_PADRAO,
      FROM `[id_projeto_anon].DS_SAUDE_SISCAD_anon.PRODUTO_PLANO_anon`) as subpadrao -- Tabela anonimizada
ON IND_INICIATIVA.COD_PLANO = subpadrao.COD_PLANO
          AND IND_INICIATIVA.COD_PRODUTO = subpadrao.COD_PRODUTO
  )
  SELECT
   tb_fin.COD_ANALITICO_BENEFICIARIO,
    data_inclusao,
    tb_fin.COD_PRESTADOR,
    tb_fin.NUM_STATUS,
    tb_fin.NUM_GUIA_PRESTADOR,
    tb_fin.NUM_SOLICITACAO_VPP_REF,
    tb_fin.COD_TIPO_CANAL,
    tb_fin.NUM_SOLIC_SP_SADT_ITEM,
    tb_fin.NUM_SOLICITACAO_VPP,
    tb_fin.QTD_SOLICITADA,
    tb_fin.QTD_AUTORIZADA,
    tb_fin.rn,
    tb_fin.COD_SERVICO,
    tb_fin.NUM_TAB_MEDICA,
    tb_fin.IDC_STATUS_ITEM,
    tb_fin.NME_TRANSACAO_CDC,
	tb_fin.COD_CARTEIRINHA_BENEFICIARIO,
    tb_fin.NME_BENEFICIARIO,
    tb_fin.NUM_CPF,
    tb_fin.NUM_CPF_TITULAR,
    tb_fin.DSC_EMAIL,
    tb_fin.DSC_EMAIL_TITULAR,
    tb_fin.NUM_TELEFONE,
    tb_fin.NUM_TELEFONE_TITULAR,
    tb_fin.COD_PLANO,
    tb_fin.COD_SUBPADRAO_PLANO,
    tb_fin.DSC_SUBPADRAO_PLANO,
    tb_fin.status_beneficiario,
    tb_fin.QTD_IDADE,
 	tb_fin.flag_ultimo_atendendimento,
	tb_fin.PERFIL_ETARIO,
   tb_fin.COD_VII,
    tb_fin.DSC_CARTEIRA_EMPRESA,
     COD_SERVICO_DASH,
     NME_PLANO_DASH,
    tb_fin.NME_PLANO_AJUSTADO,
     COD_PRESTADOR_DASH,
    tb_fin.NME_FANTASIA_PRESTADOR,
    tb_fin.MUNICIPIO_PRESTADOR,
    tb_fin.UF_PRESTADOR,
    tb_fin.COD_GRUPO_ECONOMICO_EMPRESA,
    tb_fin.NME_GRUPO_ECONOMICO_EMPRESA,
    tb_fin.COD_EMPRESA_PAGAMENTO_SEGURO,
    tb_fin.NME_FANTASIA_EMPRESA,
    --t.VALOR_PAGO,
   -- SUM(VALOR_PAGO)  AS VALOR_PAGO_TOTAL,
    --SAFE_DIVIDE(SUM(VALOR_PAGO) ,COUNT(DISTINCT CONCAT(COD_CARTEIRINHA_BENEFICIARIO, '-', FORMAT_DATE('%Y%m%d',DAT_EXECUCAO_SINISTRO))) ) AS custo_medio,
   -- COUNT(DISTINCT CONCAT(COD_CARTEIRINHA_BENEFICIARIO, '-', FORMAT_DATE('%Y%m%d', DAT_EXECUCAO_SINISTRO)))  AS qnt_atend,
    --t.DAT_EXECUCAO_SINISTRO,
    tb_fin.DSC_TIPO_SINISTRO,
    tb_fin.FLG_LIMINAR,
    tb_fin.DSC_SEXO_BENEFICIARIO,
  --DSC_SEXO_BENEFICIARIO, -- Linha duplicada ou erro de digitação no original? Mantido como estava.
  DSC_ACEITE,DSC_PRODUTO,
  DSC_PADRAO_PLANO,
  COD_PRODUTO,
  --COD_GRUPO_ECONOMICO_PRESTADOR,
  tb_fin.COD_EMPRESA_PAGAMENTO_SEGURO,
  round((SELECT AVG(CAST(QTD_IDADE AS NUMERIC)) FROM tb_fin)) as IDADE_MEDIA_BENEFICIARIO
FROM tb_fin
group by all
order by COD_CARTEIRINHA_BENEFICIARIO, RN desc
